{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\n/// @title FundMe Contract\n/// @notice A contract for crowd-funding using ETH with minimum USD requirement, leveraging Chainlink price feeds.\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    mapping(address => uint256) public addressToAmountFunded;\n    address[] public funders;\n    \n    // Contract owner's address, set at deployment\n    address public immutable i_owner;\n    \n    // Minimum USD amount required to fund (50 USD, scaled to 18 decimals)\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\n\n    AggregatorV3Interface public priceFeed;\n\n    /// @notice Sets the owner and initializes the price feed\n    /// @param priceFeedAddress The address of the Chainlink ETH/USD price feed\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    /// @notice Allows funding if minimum USD amount is met\n    /// @dev Uses PriceConverter library for ETH to USD conversion\n    function fund() public payable {\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"Minimum funding amount not met\");\n        \n        addressToAmountFunded[msg.sender] += msg.value;\n        funders.push(msg.sender);\n    }\n    \n\n    /// @notice Ensures only the contract owner can call a function\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) revert NotOwner();\n        _;\n    }\n\n    /// @notice Allows the owner to withdraw all funds from the contract\n    /// @dev Resets funder balances to zero and empties funders array\n     function withdraw() public onlyOwner {\n        for (uint256 i=0; i < funders.length; i++){\n            address funder = funders[i];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n        \n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    /// @notice Fallback function to handle plain ETH transfers\n    fallback() external payable {\n        fund();\n    }\n\n    /// @notice Receive function to handle ETH transfers with empty calldata\n    receive() external payable {\n        fund();\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n/// @title PriceConverter Library\r\n/// @notice Provides ETH to USD conversion using Chainlink price feeds\r\nlibrary PriceConverter {\r\n    \r\n    /// @notice Retrieves the latest ETH/USD price from Chainlink Price Feed\r\n    /// @dev Uses Sepolia network price feed address for ETH/USD\r\n    /// @return ethPriceInUsd Current ETH price in USD with 18 decimal precision\r\n    function getEthPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        // ETH/USD price feed address on Sepolia Testnet\r\n       \r\n\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        \r\n        // Adjusts ETH price to 18 decimal places\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    /// @notice Converts an ETH amount to its equivalent USD value\r\n    /// @param ethAmount Amount in wei (1e18 wei = 1 ETH)\r\n    /// @return usdEquivalent USD equivalent of the specified ETH amount\r\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        uint256 ethPriceInUsd = getEthPrice(priceFeed); // Current price of 1 ETH in USD (18 decimals)\r\n        \r\n        // Calculates ETH amount in USD, keeping 18 decimal precision\r\n        uint256 usdEquivalent = (ethPriceInUsd * ethAmount) / 1e18;\r\n        \r\n        return usdEquivalent;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}